= cerealize changes history

== cerealize 0.8.7 -- 2010-10-20

* Added a special encoding: "text". The purpose of this encoding is to
  let you migrate from a plain/text database column into an encoded one.
  Since Ruby 1.8's YAML engine, Sych, has some problems dumping some kinds
  of data, producing improperly formatted YAML. This causes an issue in
  delayed_job, which uses YAML to serialize ActiveRecord object, and cannot
  properly restore that object due to the bad YAML format.

  So we need to encode the column, preventing from Sych dumping bad YAML.
  This special text encoding is only used for decoding, not encoding.
  (Thus don't use it for encoding! It actually uses YAML to encode.)
  Since cerealize has the ability to detect the encoding, it will fall back
  to text encoding if it's not any of the supported encoding. Thus reading
  text from the column, then storing back to Marshal or YAML. In this case,
  we need Marshal because all the problem comes from YAML, which delayed_job
  uses anyway.

== cerealize 0.8.6 -- 2010-09-29

* Make sure attr_hash didn't get saved setting the same value.

== cerealize 0.8.5 -- 2010-09-29

* Fixed a bug that nil can't be set in cerealized column.
  This shows the bug:

    apple = Apple.find(Apple.create(:data => [5]).id)
    apple.update_attributes(:data => nil)
    assert_equal nil, apple.data # => shouldn't be [5]

== cerealize 0.8.4 -- 2010-09-29

* Fixed activerecord dependency, should be <3
* Fixed a quirk in activerecord-2.3.9 for associations and STI for attr_hash

== cerealize 0.8.3 -- 2010-08-12

* Use class_inheritable_accessor from active_support on cerealize_option to
  fix issues from inheritance.

== cerealize 0.8.2 -- 2010-08-04
* Added attr_hash feature, create virtual properties inside a hash.
  An example:

    require 'cerealize'

    class User < ActiveRecord::Base
      include Cerealize
      cerealize :data
      attr_hash :data, [:name, :mail]
    end

    user = User.new
    user.name = 'ham'

    # which is equivalent to:

    user.data ||= {}
    user.data[:name] = 'ham'

== cerealize 0.8.1 -- 2010-07-16
* module_eval is a lot faster than define_method with a block,
  I think it's all about closure.

* Now we're creating cerealize methods inside a saperate,
  this makes it easier to override things, thus doing extension.
  An example:

    class Dog < ActiveRecord::Base
      include Cerealize

      cerealize :mood, String
      def mood
        "mood: #{super}"
      end
    end

  Previously, this would break things. (Please avoid alias_method_chain.)

== cerealize 0.8.0 -- 2010-04-18
* release early, release often
